{"version":3,"sources":["stores/UserStore.js","Components/InputField/InputField.js","Components/SubmitButton/SubmitButton.js","Components/LoginForm/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","password","inputField","props","className","type","placeholder","value","onChange","e","target","submitButton","disabled","onClick","text","LoginForm","state","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","React","Component","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uWAae,MAVX,aAAe,oBACXA,YAAiBC,KAAM,CACnBC,SAAS,EACTC,YAAY,EACZC,SAAU,GACVC,SAAU,M,QCUPC,G,MAdI,SAAAC,GACf,OACI,yBAAKC,UAAU,cACX,2BACIA,UAAU,QACVC,KAAMF,EAAME,KACZC,YAAaH,EAAMG,YACnBC,MAAOJ,EAAMI,MACbC,SAAW,SAACC,GAAD,OAAON,EAAMK,SAASC,EAAEC,OAAOH,aCM3CI,G,MAdM,SAAAR,GACjB,OACI,yBAAKC,UAAU,gBACX,4BACIA,UAAU,MACVQ,SAAUT,EAAMS,SAChBC,QAAS,kBAAMV,EAAMU,YAEpBV,EAAMW,SCoFRC,G,wDAxFb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CACXhB,SAAU,GACVC,SAAS,GACTgB,gBAAgB,GALD,E,0DASLC,EAAUC,IACtBA,EAAMA,EAAIC,QACFC,OAAS,IAGjBxB,KAAKyB,SAAL,eACGJ,EAAWC,M,kCAKdtB,KAAKyB,SAAU,CACbtB,SAAS,GACTC,SAAS,GACTgB,gBAAe,M,qJAKZpB,KAAKmB,MAAMhB,S,oDACXH,KAAKmB,MAAMf,S,wDAEhBJ,KAAKyB,SAAS,CAAEL,gBAAgB,I,kBAGdM,MAAM,SAAU,CAC9BC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,YAAe,oBAEjBC,KAAMC,KAAKC,UAAU,CACnB5B,SAAUH,KAAKmB,MAAMhB,SACrBC,SAAUJ,KAAKmB,MAAMf,a,cARrB4B,E,iBAWeA,EAAIC,O,SAAnBC,E,SACUA,EAAOC,SACnBC,EAAUlC,YAAa,EACvBkC,EAAUjC,SAAW+B,EAAO/B,UACnB+B,IAA6B,IAAnBA,EAAOC,UAC1BnC,KAAKqC,YACLC,MAAMJ,EAAOK,M,kDAIfC,QAAQC,IAAR,MACAzC,KAAKqC,Y,+IAIC,IAAD,OACP,OACE,yBAAK9B,UAAU,aACd,qDACA,kBAAC,EAAD,CACCC,KAAK,OACLC,YAAY,WACZC,MAAOV,KAAKmB,MAAMhB,SAAWH,KAAKmB,MAAMhB,SAAW,GACnDQ,SAAU,SAACW,GAAD,OAAS,EAAKoB,cAAc,WAAYpB,MAGnD,kBAAC,EAAD,CACCd,KAAK,WACLC,YAAY,WACZC,MAAOV,KAAKmB,MAAMf,SAAWJ,KAAKmB,MAAMf,SAAW,GACnDO,SAAU,SAACW,GAAD,OAAS,EAAKoB,cAAc,WAAYpB,MAGnD,kBAAC,EAAD,CACCL,KAAK,QACLF,SAAUf,KAAKmB,MAAMC,eACrBJ,QAAS,kBAAM,EAAK2B,kB,GAlFJC,IAAMC,YCExBC,G,mUAGgBpB,MAAM,cAAe,CACnCC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sB,cAJhBI,E,gBAQeA,EAAIC,O,QAAnBC,E,SACUA,EAAOC,SACnBC,EAAUnC,SAAU,EACpBmC,EAAUlC,YAAa,EACvBkC,EAAUjC,SAAW+B,EAAO/B,WAE5BiC,EAAUnC,SAAU,EACpBmC,EAAUlC,YAAa,G,kDAIzBkC,EAAUnC,SAAU,EACpBmC,EAAUlC,YAAa,E,4RAMPwB,MAAM,UAAW,CAC/BC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sB,cAJhBI,E,gBAQeA,EAAIC,O,QAAnBC,E,SACUA,EAAOC,UACnBC,EAAUlC,YAAa,EACvBkC,EAAUjC,SAAW,I,kDAIvBqC,QAAQC,IAAR,M,+IAIM,IAAD,OAEP,OADAD,QAAQC,IAAIL,EAAUnC,SAClBmC,EAAUnC,QAEV,yBAAKM,UAAU,OACb,yBAAKA,UAAU,aAAf,4BAOF6B,EAAUlC,WAEV,yBAAKK,UAAU,OACb,yBAAKA,UAAU,aAAf,YACY6B,EAAUjC,UAEtB,kBAAC,EAAD,CACEc,KAAM,UACNF,UAAU,EACVC,QAAS,kBAAM,EAAK+B,eAO1B,yBAAKxC,UAAU,OACd,yBAAKA,UAAU,aACd,kBAAC,EAAD,Y,GA9EUqC,IAAMC,YAqFTG,cAASF,GClFJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.f6f721e8.chunk.js","sourcesContent":["import { extendObservable} from 'mobx';\r\n\r\nclass UserStore {\r\n    constructor() {\r\n        extendObservable(this, {\r\n            loading: true,\r\n            isLoggedIn: true,\r\n            username: \"\",\r\n            password: \"\"\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React from \"react\";\r\n\r\nimport './InputField.css';\r\n\r\nconst inputField = props => {\r\n    return (\r\n        <div className=\"inputField\">\r\n            <input \r\n                className='input'\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                value={props.value}\r\n                onChange={ (e) => props.onChange(e.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default inputField;","import React from \"react\";\r\n\r\nimport './SubmitButton.css'\r\n\r\nconst submitButton = props => {\r\n    return (\r\n        <div className=\"submitButton\">\r\n            <button\r\n                className=\"btn\"\r\n                disabled={props.disabled}\r\n                onClick={() => props.onClick() }\r\n            >\r\n                {props.text}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default submitButton;","import React from 'react';\r\nimport InputField from '../InputField/InputField';\r\nimport SubmitButton from '../SubmitButton/SubmitButton'\r\nimport UserStore from '../../stores/UserStore';\r\n\r\nimport './LoginForm.css';\r\n\r\nclass LoginForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password:\"\",\r\n      buttonDisabled: false\r\n    }\r\n  }\r\n\r\n  setInputValue(property, val) {\r\n    val = val.trim();\r\n    if (val.length > 12) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      [property]: val\r\n    })\r\n  }\r\n\r\n  resetForm() {\r\n    this.setState ({\r\n      username:'',\r\n      password:'',\r\n      buttonDisabled:false\r\n    })\r\n  }\r\n\r\n  async doLogin() {\r\n    if (!this.state.username) { return; }\r\n    if (!this.state.password) {return; }\r\n\r\n    this.setState({ buttonDisabled: true})\r\n\r\n    try {\r\n      let res = await fetch('/login', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'ContentType': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          username: this.state.username,\r\n          password: this.state.password\r\n        })\r\n      })\r\n      let result = await res.json();\r\n      if (result && result.success) {\r\n        UserStore.isLoggedIn = true;\r\n        UserStore.username = result.username;\r\n      } else if (result && result.success === false) {\r\n        this.resetForm();\r\n        alert(result.msg);\r\n      }\r\n    }\r\n    catch(error) {\r\n      console.log(error);\r\n      this.resetForm();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"loginForm\">\r\n       <h2>Hello, log in please!</h2>\r\n       <InputField\r\n        type=\"text\"\r\n        placeholder=\"Username\"\r\n        value={this.state.username ? this.state.username : \"\"}\r\n        onChange={(val) => this.setInputValue('username', val)}\r\n       />\r\n       \r\n       <InputField\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        value={this.state.password ? this.state.password : \"\"}\r\n        onChange={(val) => this.setInputValue('password', val)}\r\n       />\r\n\r\n       <SubmitButton\r\n        text=\"Login\"\r\n        disabled={this.state.buttonDisabled}\r\n        onClick={() => this.doLogin()}\r\n       />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nimport UserStore from './stores/UserStore';\nimport LoginForm from './Components/LoginForm/LoginForm';\nimport SubmitButton from './Components/SubmitButton/SubmitButton';\n\nimport './App.css';\n\nclass App extends React.Component {\n  async componentDidMount() {\n    try {\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application.json',\n          'Content-type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n      if (result && result.success) {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      } else {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n    }\n    catch(error) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }\n  \n  async doLogout() {\n    try {\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'content-type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n      if (result && result.success) {\n        UserStore.isLoggedIn = true;\n        UserStore.username = \"\";\n      } \n    }\n    catch(error) {\n      console.log(error);\n    }\n  }\n \n  render() {\n    console.log(UserStore.loading);\n    if (UserStore.loading) {\n      return (\n        <div className=\"app\">\n          <div className=\"container\">\n            Loading, please wait...\n          </div>\n        </div>\n      );\n    };\n\n    if (UserStore.isLoggedIn) {\n      return (\n        <div className=\"app\">\n          <div className=\"container\">\n            Welcome, {UserStore.username}\n          </div>\n          <SubmitButton \n            text={'Log out'}\n            disabled={false}\n            onClick={() => this.doLogout()}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"app\">\n       <div className=\"container\">\n        <LoginForm />\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}